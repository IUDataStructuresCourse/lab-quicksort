import sequences.*;
import static sequences.Algorithms.*;

public class QuickSort {

    /**
     * TODO
     * @param begin The position of the first element in the sequence to be sorted.
     * @param end   The position that is one-past the last element in the sequence to be sorted.
     * @param <E>   The element type for the sequence.
     */
    public static <E extends Comparable<? super E>>
    void quicksort(Iter<E> begin, Iter<E> end) {
        //throw new UnsupportedOperationException();

        if (! begin.equals(end)) {
            Iter<E> pivot = partition_gen(begin, end);
            quicksort(begin, pivot);
            pivot.advance();
            quicksort(pivot, end);
        }
    }

    /***********  Helper methods, do not distribute to students *****/

    static <E extends Comparable<? super E>>
    Iter<E> partition_gen(Iter<E> begin, Iter<E> end) {
        Iter<E> last = last(begin, end);
        E pivot = last.get();
        Iter<E> i = begin.clone();
        for (Iter<E> j = i.clone(); ! j.equals(last); j.advance()) {
            if (j.get().compareTo(pivot) < 1) {
                iter_swap(i, j);
                i.advance();
            }
        }
        iter_swap(last, i);
        return i;
    }



}
